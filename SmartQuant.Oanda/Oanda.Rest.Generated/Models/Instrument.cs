// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Linq;
using Newtonsoft.Json.Linq;

namespace Oanda.Rest.Models
{
    public partial class Instrument
    {
        private string _displayName;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public string DisplayName
        {
            get { return this._displayName; }
            set { this._displayName = value; }
        }
        
        private string _instrument;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public string Instrument
        {
            get { return this._instrument; }
            set { this._instrument = value; }
        }
        
        private double? _maxTradeUnits;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public double? MaxTradeUnits
        {
            get { return this._maxTradeUnits; }
            set { this._maxTradeUnits = value; }
        }
        
        private double? _pip;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public double? Pip
        {
            get { return this._pip; }
            set { this._pip = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the Instrument class.
        /// </summary>
        public Instrument()
        {
        }
        
        /// <summary>
        /// Deserialize the object
        /// </summary>
        public virtual void DeserializeJson(JToken inputObject)
        {
            if (inputObject != null && inputObject.Type != JTokenType.Null)
            {
                JToken displayNameValue = inputObject["displayName"];
                if (displayNameValue != null && displayNameValue.Type != JTokenType.Null)
                {
                    this.DisplayName = ((string)displayNameValue);
                }
                JToken instrumentValue = inputObject["instrument"];
                if (instrumentValue != null && instrumentValue.Type != JTokenType.Null)
                {
                    this.Instrument = ((string)instrumentValue);
                }
                JToken maxTradeUnitsValue = inputObject["maxTradeUnits"];
                if (maxTradeUnitsValue != null && maxTradeUnitsValue.Type != JTokenType.Null)
                {
                    this.MaxTradeUnits = ((double)maxTradeUnitsValue);
                }
                JToken pipValue = inputObject["pip"];
                if (pipValue != null && pipValue.Type != JTokenType.Null)
                {
                    this.Pip = ((double)pipValue);
                }
            }
        }
    }
}
