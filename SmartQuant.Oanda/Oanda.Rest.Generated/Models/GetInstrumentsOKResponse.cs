// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Rest;
using Newtonsoft.Json.Linq;
using Oanda.Rest.Models;

namespace Oanda.Rest.Models
{
    public partial class GetInstrumentsOKResponse : IEnumerable<Instrument>
    {
        private IList<Instrument> _instruments;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public IList<Instrument> Instruments
        {
            get { return this._instruments; }
            set { this._instruments = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the GetInstrumentsOKResponse class.
        /// </summary>
        public GetInstrumentsOKResponse()
        {
            this.Instruments = new LazyList<Instrument>();
        }
        
        /// <summary>
        /// Gets the sequence of instruments.
        /// </summary>
        public IEnumerator<Instrument> GetEnumerator()
        {
            return this.Instruments.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of instruments.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
        
        /// <summary>
        /// Deserialize the object
        /// </summary>
        public virtual void DeserializeJson(JToken inputObject)
        {
            if (inputObject != null && inputObject.Type != JTokenType.Null)
            {
                JToken instrumentsSequence = ((JToken)inputObject["instruments"]);
                if (instrumentsSequence != null && instrumentsSequence.Type != JTokenType.Null)
                {
                    foreach (JToken instrumentsValue in ((JArray)instrumentsSequence))
                    {
                        Instrument instrument = new Instrument();
                        instrument.DeserializeJson(instrumentsValue);
                        this.Instruments.Add(instrument);
                    }
                }
            }
        }
    }
}
