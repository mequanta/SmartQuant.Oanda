// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using Oanda.Rest;
using Oanda.Rest.Models;

namespace Oanda.Rest
{
    public static partial class OandaRestAPIPracticeExtensions
    {
        /// <param name='operations'>
        /// Reference to the Oanda.Rest.IOandaRestAPIPractice.
        /// </param>
        /// <param name='accountID'>
        /// Required.
        /// </param>
        /// <param name='tradeID'>
        /// Required.
        /// </param>
        public static object CloseOpenTrade(this IOandaRestAPIPractice operations, int accountID, int tradeID)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IOandaRestAPIPractice)s).CloseOpenTradeAsync(accountID, tradeID);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Oanda.Rest.IOandaRestAPIPractice.
        /// </param>
        /// <param name='accountID'>
        /// Required.
        /// </param>
        /// <param name='tradeID'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> CloseOpenTradeAsync(this IOandaRestAPIPractice operations, int accountID, int tradeID, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.CloseOpenTradeWithOperationResponseAsync(accountID, tradeID, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Oanda.Rest.IOandaRestAPIPractice.
        /// </param>
        /// <param name='accountID'>
        /// Required.
        /// </param>
        /// <param name='instrument'>
        /// Required.
        /// </param>
        public static object ClosePositionForInstrument(this IOandaRestAPIPractice operations, int accountID, string instrument)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IOandaRestAPIPractice)s).ClosePositionForInstrumentAsync(accountID, instrument);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Oanda.Rest.IOandaRestAPIPractice.
        /// </param>
        /// <param name='accountID'>
        /// Required.
        /// </param>
        /// <param name='instrument'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> ClosePositionForInstrumentAsync(this IOandaRestAPIPractice operations, int accountID, string instrument, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.ClosePositionForInstrumentWithOperationResponseAsync(accountID, instrument, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Oanda.Rest.IOandaRestAPIPractice.
        /// </param>
        /// <param name='currency'>
        /// Optional.
        /// </param>
        public static CreateAccountOKResponse CreateAccount(this IOandaRestAPIPractice operations, string currency = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IOandaRestAPIPractice)s).CreateAccountAsync(currency);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Oanda.Rest.IOandaRestAPIPractice.
        /// </param>
        /// <param name='currency'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<CreateAccountOKResponse> CreateAccountAsync(this IOandaRestAPIPractice operations, string currency = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Oanda.Rest.Models.CreateAccountOKResponse> result = await operations.CreateAccountWithOperationResponseAsync(currency, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Oanda.Rest.IOandaRestAPIPractice.
        /// </param>
        /// <param name='accountID'>
        /// Required.
        /// </param>
        public static object CreateOrder(this IOandaRestAPIPractice operations, long accountID)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IOandaRestAPIPractice)s).CreateOrderAsync(accountID);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Oanda.Rest.IOandaRestAPIPractice.
        /// </param>
        /// <param name='accountID'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> CreateOrderAsync(this IOandaRestAPIPractice operations, long accountID, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.CreateOrderWithOperationResponseAsync(accountID, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Oanda.Rest.IOandaRestAPIPractice.
        /// </param>
        /// <param name='accountID'>
        /// Required.
        /// </param>
        /// <param name='orderID'>
        /// Required.
        /// </param>
        public static object DeleteOrder(this IOandaRestAPIPractice operations, long accountID, long orderID)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IOandaRestAPIPractice)s).DeleteOrderAsync(accountID, orderID);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Oanda.Rest.IOandaRestAPIPractice.
        /// </param>
        /// <param name='accountID'>
        /// Required.
        /// </param>
        /// <param name='orderID'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> DeleteOrderAsync(this IOandaRestAPIPractice operations, long accountID, long orderID, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.DeleteOrderWithOperationResponseAsync(accountID, orderID, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Oanda.Rest.IOandaRestAPIPractice.
        /// </param>
        /// <param name='accountID'>
        /// Required.
        /// </param>
        public static GetAccountOKResponse GetAccount(this IOandaRestAPIPractice operations, long accountID)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IOandaRestAPIPractice)s).GetAccountAsync(accountID);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Oanda.Rest.IOandaRestAPIPractice.
        /// </param>
        /// <param name='accountID'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<GetAccountOKResponse> GetAccountAsync(this IOandaRestAPIPractice operations, long accountID, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Oanda.Rest.Models.GetAccountOKResponse> result = await operations.GetAccountWithOperationResponseAsync(accountID, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Oanda.Rest.IOandaRestAPIPractice.
        /// </param>
        /// <param name='instrument'>
        /// Required.
        /// </param>
        /// <param name='granularity'>
        /// Optional.
        /// </param>
        /// <param name='count'>
        /// Optional.
        /// </param>
        /// <param name='start'>
        /// Optional.
        /// </param>
        /// <param name='candleFormat'>
        /// Optional.
        /// </param>
        /// <param name='includeFirst'>
        /// Optional.
        /// </param>
        /// <param name='dailyAlignment'>
        /// Optional.
        /// </param>
        /// <param name='alignmentTimezone'>
        /// Optional.
        /// </param>
        /// <param name='weeklyAlignment'>
        /// Optional.
        /// </param>
        public static GetCandlesOKResponse GetCandles(this IOandaRestAPIPractice operations, string instrument, string granularity = null, string count = null, string start = null, string candleFormat = null, string includeFirst = null, string dailyAlignment = null, string alignmentTimezone = null, string weeklyAlignment = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IOandaRestAPIPractice)s).GetCandlesAsync(instrument, granularity, count, start, candleFormat, includeFirst, dailyAlignment, alignmentTimezone, weeklyAlignment);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Oanda.Rest.IOandaRestAPIPractice.
        /// </param>
        /// <param name='instrument'>
        /// Required.
        /// </param>
        /// <param name='granularity'>
        /// Optional.
        /// </param>
        /// <param name='count'>
        /// Optional.
        /// </param>
        /// <param name='start'>
        /// Optional.
        /// </param>
        /// <param name='candleFormat'>
        /// Optional.
        /// </param>
        /// <param name='includeFirst'>
        /// Optional.
        /// </param>
        /// <param name='dailyAlignment'>
        /// Optional.
        /// </param>
        /// <param name='alignmentTimezone'>
        /// Optional.
        /// </param>
        /// <param name='weeklyAlignment'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<GetCandlesOKResponse> GetCandlesAsync(this IOandaRestAPIPractice operations, string instrument, string granularity = null, string count = null, string start = null, string candleFormat = null, string includeFirst = null, string dailyAlignment = null, string alignmentTimezone = null, string weeklyAlignment = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Oanda.Rest.Models.GetCandlesOKResponse> result = await operations.GetCandlesWithOperationResponseAsync(instrument, granularity, count, start, candleFormat, includeFirst, dailyAlignment, alignmentTimezone, weeklyAlignment, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Oanda.Rest.IOandaRestAPIPractice.
        /// </param>
        /// <param name='username'>
        /// Optional.
        /// </param>
        public static GetccountsOKResponse Getccounts(this IOandaRestAPIPractice operations, string username = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IOandaRestAPIPractice)s).GetccountsAsync(username);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Oanda.Rest.IOandaRestAPIPractice.
        /// </param>
        /// <param name='username'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<GetccountsOKResponse> GetccountsAsync(this IOandaRestAPIPractice operations, string username = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Oanda.Rest.Models.GetccountsOKResponse> result = await operations.GetccountsWithOperationResponseAsync(username, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Oanda.Rest.IOandaRestAPIPractice.
        /// </param>
        /// <param name='accountID'>
        /// Required.
        /// </param>
        public static object GetFullTransactionsHistory(this IOandaRestAPIPractice operations, int accountID)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IOandaRestAPIPractice)s).GetFullTransactionsHistoryAsync(accountID);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Oanda.Rest.IOandaRestAPIPractice.
        /// </param>
        /// <param name='accountID'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> GetFullTransactionsHistoryAsync(this IOandaRestAPIPractice operations, int accountID, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.GetFullTransactionsHistoryWithOperationResponseAsync(accountID, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Oanda.Rest.IOandaRestAPIPractice.
        /// </param>
        /// <param name='accountID'>
        /// Required.
        /// </param>
        /// <param name='orderID'>
        /// Required.
        /// </param>
        public static object GetInformationForOrder(this IOandaRestAPIPractice operations, long accountID, long orderID)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IOandaRestAPIPractice)s).GetInformationForOrderAsync(accountID, orderID);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Oanda.Rest.IOandaRestAPIPractice.
        /// </param>
        /// <param name='accountID'>
        /// Required.
        /// </param>
        /// <param name='orderID'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> GetInformationForOrderAsync(this IOandaRestAPIPractice operations, long accountID, long orderID, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.GetInformationForOrderWithOperationResponseAsync(accountID, orderID, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Oanda.Rest.IOandaRestAPIPractice.
        /// </param>
        /// <param name='accountID'>
        /// Required.
        /// </param>
        /// <param name='tradeID'>
        /// Required.
        /// </param>
        public static object GetInformationForTrade(this IOandaRestAPIPractice operations, int accountID, int tradeID)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IOandaRestAPIPractice)s).GetInformationForTradeAsync(accountID, tradeID);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Oanda.Rest.IOandaRestAPIPractice.
        /// </param>
        /// <param name='accountID'>
        /// Required.
        /// </param>
        /// <param name='tradeID'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> GetInformationForTradeAsync(this IOandaRestAPIPractice operations, int accountID, int tradeID, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.GetInformationForTradeWithOperationResponseAsync(accountID, tradeID, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Oanda.Rest.IOandaRestAPIPractice.
        /// </param>
        /// <param name='accountID'>
        /// Required.
        /// </param>
        /// <param name='transactionID'>
        /// Required.
        /// </param>
        public static object GetInformationForTransaction(this IOandaRestAPIPractice operations, int accountID, string transactionID)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IOandaRestAPIPractice)s).GetInformationForTransactionAsync(accountID, transactionID);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Oanda.Rest.IOandaRestAPIPractice.
        /// </param>
        /// <param name='accountID'>
        /// Required.
        /// </param>
        /// <param name='transactionID'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> GetInformationForTransactionAsync(this IOandaRestAPIPractice operations, int accountID, string transactionID, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.GetInformationForTransactionWithOperationResponseAsync(accountID, transactionID, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Oanda.Rest.IOandaRestAPIPractice.
        /// </param>
        /// <param name='accountId'>
        /// Required.
        /// </param>
        /// <param name='fields'>
        /// Optional.
        /// </param>
        /// <param name='instruments'>
        /// Optional.
        /// </param>
        public static GetInstrumentsOKResponse GetInstruments(this IOandaRestAPIPractice operations, string accountId, string fields = null, string instruments = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IOandaRestAPIPractice)s).GetInstrumentsAsync(accountId, fields, instruments);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Oanda.Rest.IOandaRestAPIPractice.
        /// </param>
        /// <param name='accountId'>
        /// Required.
        /// </param>
        /// <param name='fields'>
        /// Optional.
        /// </param>
        /// <param name='instruments'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<GetInstrumentsOKResponse> GetInstrumentsAsync(this IOandaRestAPIPractice operations, string accountId, string fields = null, string instruments = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Oanda.Rest.Models.GetInstrumentsOKResponse> result = await operations.GetInstrumentsWithOperationResponseAsync(accountId, fields, instruments, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Oanda.Rest.IOandaRestAPIPractice.
        /// </param>
        /// <param name='accountID'>
        /// Required.
        /// </param>
        public static object GetOpenPositions(this IOandaRestAPIPractice operations, int accountID)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IOandaRestAPIPractice)s).GetOpenPositionsAsync(accountID);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Oanda.Rest.IOandaRestAPIPractice.
        /// </param>
        /// <param name='accountID'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> GetOpenPositionsAsync(this IOandaRestAPIPractice operations, int accountID, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.GetOpenPositionsWithOperationResponseAsync(accountID, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Oanda.Rest.IOandaRestAPIPractice.
        /// </param>
        /// <param name='accountID'>
        /// Required.
        /// </param>
        public static object GetOpenTrades(this IOandaRestAPIPractice operations, int accountID)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IOandaRestAPIPractice)s).GetOpenTradesAsync(accountID);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Oanda.Rest.IOandaRestAPIPractice.
        /// </param>
        /// <param name='accountID'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> GetOpenTradesAsync(this IOandaRestAPIPractice operations, int accountID, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.GetOpenTradesWithOperationResponseAsync(accountID, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Oanda.Rest.IOandaRestAPIPractice.
        /// </param>
        /// <param name='accountID'>
        /// Required.
        /// </param>
        /// <param name='instrument'>
        /// Required.
        /// </param>
        public static object GetPositionForInstrument(this IOandaRestAPIPractice operations, int accountID, string instrument)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IOandaRestAPIPractice)s).GetPositionForInstrumentAsync(accountID, instrument);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Oanda.Rest.IOandaRestAPIPractice.
        /// </param>
        /// <param name='accountID'>
        /// Required.
        /// </param>
        /// <param name='instrument'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> GetPositionForInstrumentAsync(this IOandaRestAPIPractice operations, int accountID, string instrument, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.GetPositionForInstrumentWithOperationResponseAsync(accountID, instrument, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Oanda.Rest.IOandaRestAPIPractice.
        /// </param>
        /// <param name='instruments'>
        /// Required.
        /// </param>
        /// <param name='since'>
        /// Optional.
        /// </param>
        public static GetPricesOKResponse GetPrices(this IOandaRestAPIPractice operations, string instruments, string since = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IOandaRestAPIPractice)s).GetPricesAsync(instruments, since);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Oanda.Rest.IOandaRestAPIPractice.
        /// </param>
        /// <param name='instruments'>
        /// Required.
        /// </param>
        /// <param name='since'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<GetPricesOKResponse> GetPricesAsync(this IOandaRestAPIPractice operations, string instruments, string since = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Oanda.Rest.Models.GetPricesOKResponse> result = await operations.GetPricesWithOperationResponseAsync(instruments, since, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Oanda.Rest.IOandaRestAPIPractice.
        /// </param>
        /// <param name='accountID'>
        /// Required.
        /// </param>
        public static object GetTransactionHistory(this IOandaRestAPIPractice operations, int accountID)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IOandaRestAPIPractice)s).GetTransactionHistoryAsync(accountID);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Oanda.Rest.IOandaRestAPIPractice.
        /// </param>
        /// <param name='accountID'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> GetTransactionHistoryAsync(this IOandaRestAPIPractice operations, int accountID, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.GetTransactionHistoryWithOperationResponseAsync(accountID, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Oanda.Rest.IOandaRestAPIPractice.
        /// </param>
        /// <param name='accountID'>
        /// Required.
        /// </param>
        /// <param name='tradeID'>
        /// Required.
        /// </param>
        public static object ModifyTrade(this IOandaRestAPIPractice operations, int accountID, int tradeID)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IOandaRestAPIPractice)s).ModifyTradeAsync(accountID, tradeID);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Oanda.Rest.IOandaRestAPIPractice.
        /// </param>
        /// <param name='accountID'>
        /// Required.
        /// </param>
        /// <param name='tradeID'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> ModifyTradeAsync(this IOandaRestAPIPractice operations, int accountID, int tradeID, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.ModifyTradeWithOperationResponseAsync(accountID, tradeID, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
