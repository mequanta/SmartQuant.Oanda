// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using Oanda.Rest.Models;

namespace Oanda.Rest
{
    public partial interface IOandaRestAPIPractice : IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        Uri BaseUri
        {
            get; set; 
        }
        
        /// <param name='accountID'>
        /// Required.
        /// </param>
        /// <param name='tradeID'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CloseOpenTradeWithOperationResponseAsync(int accountID, int tradeID, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='accountID'>
        /// Required.
        /// </param>
        /// <param name='instrument'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> ClosePositionForInstrumentWithOperationResponseAsync(int accountID, string instrument, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='currency'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<CreateAccountOKResponse>> CreateAccountWithOperationResponseAsync(string currency = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='accountID'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateOrderWithOperationResponseAsync(long accountID, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='accountID'>
        /// Required.
        /// </param>
        /// <param name='orderID'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteOrderWithOperationResponseAsync(long accountID, long orderID, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='accountID'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<GetAccountOKResponse>> GetAccountWithOperationResponseAsync(long accountID, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='instrument'>
        /// Required.
        /// </param>
        /// <param name='granularity'>
        /// Optional.
        /// </param>
        /// <param name='count'>
        /// Optional.
        /// </param>
        /// <param name='start'>
        /// Optional.
        /// </param>
        /// <param name='candleFormat'>
        /// Optional.
        /// </param>
        /// <param name='includeFirst'>
        /// Optional.
        /// </param>
        /// <param name='dailyAlignment'>
        /// Optional.
        /// </param>
        /// <param name='alignmentTimezone'>
        /// Optional.
        /// </param>
        /// <param name='weeklyAlignment'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<GetCandlesOKResponse>> GetCandlesWithOperationResponseAsync(string instrument, string granularity = null, string count = null, string start = null, string candleFormat = null, string includeFirst = null, string dailyAlignment = null, string alignmentTimezone = null, string weeklyAlignment = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='username'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<GetccountsOKResponse>> GetccountsWithOperationResponseAsync(string username = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='accountID'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetFullTransactionsHistoryWithOperationResponseAsync(int accountID, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='accountID'>
        /// Required.
        /// </param>
        /// <param name='orderID'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetInformationForOrderWithOperationResponseAsync(long accountID, long orderID, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='accountID'>
        /// Required.
        /// </param>
        /// <param name='tradeID'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetInformationForTradeWithOperationResponseAsync(int accountID, int tradeID, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='accountID'>
        /// Required.
        /// </param>
        /// <param name='transactionID'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetInformationForTransactionWithOperationResponseAsync(int accountID, string transactionID, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='accountId'>
        /// Required.
        /// </param>
        /// <param name='fields'>
        /// Optional.
        /// </param>
        /// <param name='instruments'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<GetInstrumentsOKResponse>> GetInstrumentsWithOperationResponseAsync(string accountId, string fields = null, string instruments = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='accountID'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetOpenPositionsWithOperationResponseAsync(int accountID, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='accountID'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetOpenTradesWithOperationResponseAsync(int accountID, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='accountID'>
        /// Required.
        /// </param>
        /// <param name='instrument'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetPositionForInstrumentWithOperationResponseAsync(int accountID, string instrument, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='instruments'>
        /// Required.
        /// </param>
        /// <param name='since'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<GetPricesOKResponse>> GetPricesWithOperationResponseAsync(string instruments, string since = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='accountID'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetTransactionHistoryWithOperationResponseAsync(int accountID, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='accountID'>
        /// Required.
        /// </param>
        /// <param name='tradeID'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> ModifyTradeWithOperationResponseAsync(int accountID, int tradeID, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    }
}
